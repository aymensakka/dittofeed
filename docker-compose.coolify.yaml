version: '3.8'

services:
  # PostgreSQL Database with Enterprise Multitenancy
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: dittofeed
      POSTGRES_USER: dittofeed
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./config/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./packages/backend-lib/drizzle:/docker-entrypoint-initdb.d/migrations
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dittofeed -d dittofeed"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  # Redis Cache for Workspace-Scoped Caching
  redis:
    image: redis:7-alpine
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server /usr/local/etc/redis/redis.conf

  # API Service with Enterprise Multitenancy
  api:
    image: docker.reactmotion.com/my-docker-repo/dittofeed/api:multitenancy-redis-v1
    environment:
      NODE_ENV: ${NODE_ENV}
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_HOST: postgres
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_USER: dittofeed
      DATABASE_NAME: dittofeed
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      WORKSPACE_ISOLATION_ENABLED: "true"
      AUTH_MODE: ${AUTH_MODE}
      JWT_SECRET: ${JWT_SECRET}
      SECRET_KEY: ${SECRET_KEY}
      CORS_ORIGIN: ${CORS_ORIGIN}
      MULTITENANCY_ENABLED: "true"
      ENABLE_WORKSPACE_QUOTA: "true"
      ENABLE_MULTI_PARENT: "true"
      CLICKHOUSE_HOST: ${CLICKHOUSE_HOST:-localhost}
      BOOTSTRAP_WORKSPACE_NAME: ${BOOTSTRAP_WORKSPACE_NAME}
      BOOTSTRAP_WORKSPACE_ADMIN_EMAIL: ${BOOTSTRAP_WORKSPACE_ADMIN_EMAIL}
      API_BASE_URL: ${API_BASE_URL:-http://localhost:3001}
      DASHBOARD_URL: ${DASHBOARD_URL:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Dashboard UI with Enterprise Multitenancy
  dashboard:
    image: docker.reactmotion.com/my-docker-repo/dittofeed/dashboard:multitenancy-redis-v1
    environment:
      NODE_ENV: ${NODE_ENV}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-secret}
      API_BASE_URL: http://api:3001
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_HOST: postgres
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_USER: dittofeed
      DATABASE_NAME: dittofeed
      AUTH_MODE: ${AUTH_MODE}
      MULTITENANCY_ENABLED: "true"
      ENABLE_WORKSPACE_QUOTA: "true"
      NEXT_PUBLIC_API_BASE_URL: ${API_BASE_URL:-http://localhost:3001}
      NEXT_PUBLIC_AUTH_MODE: ${AUTH_MODE}
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Worker Service with Enterprise Multitenancy
  worker:
    image: docker.reactmotion.com/my-docker-repo/dittofeed/worker:multitenancy-redis-v1
    environment:
      NODE_ENV: ${NODE_ENV}
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_HOST: postgres
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_USER: dittofeed
      DATABASE_NAME: dittofeed
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      WORKSPACE_ISOLATION_ENABLED: "true"
      AUTH_MODE: ${AUTH_MODE}
      JWT_SECRET: ${JWT_SECRET}
      SECRET_KEY: ${SECRET_KEY}
      MULTITENANCY_ENABLED: "true"
      ENABLE_WORKSPACE_QUOTA: "true"
      TEMPORAL_ADDRESS: ${TEMPORAL_ADDRESS:-localhost:7233}
      WORKER_ID: ${WORKER_ID:-worker-1}
      CLICKHOUSE_HOST: ${CLICKHOUSE_HOST:-localhost}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

# No custom network - let Coolify manage networking