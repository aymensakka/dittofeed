version: '3.8'

services:
  # PostgreSQL Database with Enterprise Multitenancy
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: dittofeed
      POSTGRES_USER: dittofeed
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/init-postgres.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./deployment/init-temporal-db.sql:/docker-entrypoint-initdb.d/02-temporal.sql
    command: >
      postgres
      -c listen_addresses='*'
      -c max_connections=200
      -c shared_buffers=256MB
      -c wal_level=replica
      -c max_wal_size=1GB
      -c min_wal_size=80MB
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dittofeed -d dittofeed"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache for Workspace-Scoped Caching
  redis:
    image: redis:7-alpine
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ClickHouse for Analytics and Event Storage
  clickhouse:
    image: clickhouse/clickhouse-server:23-alpine
    environment:
      CLICKHOUSE_DB: dittofeed
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-dittofeed}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - clickhouse_logs:/var/log/clickhouse-server
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "clickhouse-client --query 'SELECT 1' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  # Temporal Workflow Engine
  temporal:
    image: temporalio/auto-setup:1.22.4
    environment:
      DB: postgresql
      DB_PORT: 5432
      POSTGRES_USER: dittofeed
      POSTGRES_PWD: ${POSTGRES_PASSWORD}
      POSTGRES_SEEDS: postgres
      SKIP_SCHEMA_SETUP: false
      SKIP_DEFAULT_NAMESPACE_CREATION: false
      TEMPORAL_CLI_ADDRESS: temporal:7233
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_CLI_SHOW_STACKS: 1
      SQL_TLS: false
      SQL_TLS_ENABLED: false
      POSTGRES_TLS_ENABLED: false
      POSTGRES_TLS_DISABLE_HOST_VERIFICATION: true
      BIND_ON_IP: temporal
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "workflow", "list"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 90s

  # API Service with Enterprise Multitenancy
  api:
    image: docker.reactmotion.com/my-docker-repo/dittofeed/api:multitenancy-redis-v1
    environment:
      NODE_ENV: ${NODE_ENV}
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_HOST: postgres
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_USER: dittofeed
      DATABASE_NAME: dittofeed
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      WORKSPACE_ISOLATION_ENABLED: "true"
      AUTH_MODE: ${AUTH_MODE}
      JWT_SECRET: ${JWT_SECRET}
      SECRET_KEY: ${SECRET_KEY}
      CORS_ORIGIN: ${CORS_ORIGIN}
      MULTITENANCY_ENABLED: "true"
      ENABLE_WORKSPACE_QUOTA: "true"
      ENABLE_MULTI_PARENT: "true"
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-dittofeed}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DATABASE: dittofeed
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_NAMESPACE: default
      WRITE_MODE: ch-sync
      BOOTSTRAP_WORKSPACE_NAME: ${BOOTSTRAP_WORKSPACE_NAME}
      BOOTSTRAP_WORKSPACE_ADMIN_EMAIL: ${BOOTSTRAP_WORKSPACE_ADMIN_EMAIL}
      API_BASE_URL: ${API_BASE_URL:-http://localhost:3001}
      DASHBOARD_URL: ${DASHBOARD_URL:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      temporal:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Dashboard UI with Enterprise Multitenancy
  dashboard:
    image: docker.reactmotion.com/my-docker-repo/dittofeed/dashboard:multitenancy-redis-v1
    environment:
      NODE_ENV: ${NODE_ENV}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-secret}
      API_BASE_URL: http://api:3001
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_HOST: postgres
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_USER: dittofeed
      DATABASE_NAME: dittofeed
      AUTH_MODE: ${AUTH_MODE}
      MULTITENANCY_ENABLED: "true"
      ENABLE_WORKSPACE_QUOTA: "true"
      NEXT_PUBLIC_API_BASE_URL: ${API_BASE_URL:-http://localhost:3001}
      NEXT_PUBLIC_AUTH_MODE: ${AUTH_MODE}
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-dittofeed}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DATABASE: dittofeed
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_NAMESPACE: default
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Worker Service with Enterprise Multitenancy
  worker:
    image: docker.reactmotion.com/my-docker-repo/dittofeed/worker:multitenancy-redis-v1
    environment:
      NODE_ENV: ${NODE_ENV}
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_HOST: postgres
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_USER: dittofeed
      DATABASE_NAME: dittofeed
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      WORKSPACE_ISOLATION_ENABLED: "true"
      AUTH_MODE: ${AUTH_MODE}
      JWT_SECRET: ${JWT_SECRET}
      SECRET_KEY: ${SECRET_KEY}
      MULTITENANCY_ENABLED: "true"
      ENABLE_WORKSPACE_QUOTA: "true"
      TEMPORAL_ADDRESS: temporal:7233
      WORKER_ID: ${WORKER_ID:-worker-1}
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-dittofeed}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DATABASE: dittofeed
      TEMPORAL_NAMESPACE: default
      WRITE_MODE: ch-sync
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      temporal:
        condition: service_healthy
    restart: unless-stopped

  # Cloudflare Tunnel Connector
  cloudflared:
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CF_TUNNEL_TOKEN}

volumes:
  postgres_data:
    external: true
    name: p0gcsc088cogco0cokco4404_postgres-data
  redis_data:
    external: true
    name: p0gcsc088cogco0cokco4404_redis-data
  clickhouse_data:
    external: true
    name: p0gcsc088cogco0cokco4404_clickhouse-data
  clickhouse_logs:
    external: true
    name: p0gcsc088cogco0cokco4404_clickhouse-logs

# Let Coolify manage the network - don't specify any network