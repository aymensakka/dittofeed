version: '3.8'

# Docker Compose for PRODUCTION DEPLOYMENT (via Coolify)
# This pulls pre-built images from Nexus and deploys them
# No building happens here - only pulling and running

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dittofeed_postgres
    environment:
      POSTGRES_DB: dittofeed
      POSTGRES_USER: dittofeed
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dittofeed_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dittofeed -d dittofeed"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dittofeed_redis
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - dittofeed_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --requirepass ${REDIS_PASSWORD}

  # Dittofeed API (from Nexus)
  api:
    image: docker.reactmotion.com/my-docker-repo/dittofeed/api:multitenancy-redis-v1
    container_name: dittofeed_api
    pull_policy: always  # Always pull latest from Nexus
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://dittofeed:${POSTGRES_PASSWORD}@postgres:5432/dittofeed
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      DOMAIN: ${DOMAIN}
      API_BASE_URL: ${API_BASE_URL}
      CORS_ORIGIN: ${CORS_ORIGIN}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      AUTH_MODE: ${AUTH_MODE:-multi-tenant}
      WORKSPACE_TYPE: ${WORKSPACE_TYPE:-parent}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dittofeed_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dittofeed Dashboard (from Nexus)
  dashboard:
    image: docker.reactmotion.com/my-docker-repo/dittofeed/dashboard:multitenancy-redis-v1
    container_name: dittofeed_dashboard
    pull_policy: always  # Always pull latest from Nexus
    environment:
      NODE_ENV: production
      PORT: 3000
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - api
    networks:
      - dittofeed_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background Worker (from Nexus)
  worker:
    image: docker.reactmotion.com/my-docker-repo/dittofeed/worker:multitenancy-redis-v1
    container_name: dittofeed_worker
    pull_policy: always  # Always pull latest from Nexus
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://dittofeed:${POSTGRES_PASSWORD}@postgres:5432/dittofeed
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      TEMPORAL_ADDRESS: ${TEMPORAL_ADDRESS:-temporal:7233}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dittofeed_network
    restart: unless-stopped

  # Cloudflare Tunnel (optional)
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: dittofeed_cloudflared
    command: tunnel --no-autoupdate run --token ${CF_TUNNEL_TOKEN}
    networks:
      - dittofeed_network
    restart: unless-stopped
    profiles:
      - cloudflare

networks:
  dittofeed_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: