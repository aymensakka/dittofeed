#!/bin/bash
# Update Cloudflare tunnel routes for Coolify deployment

echo "=================================================="
echo "üîß Updating Cloudflare Tunnel Routes for Coolify"
echo "=================================================="
echo ""
echo "This script will guide you through updating the tunnel routes"
echo "to work with Coolify's container naming convention."
echo ""

# Get current container info from Coolify
echo "üìã Collecting container information..."
echo ""
echo "Please run these commands on your Coolify server:"
echo ""
echo "1. List all containers:"
echo "   docker ps --format 'table {{.Names}}\t{{.ID}}\t{{.Status}}' | grep -E 'api|dashboard'"
echo ""
echo "2. Get network details:"
echo "   docker network ls | grep -i coolify"
echo ""
echo "3. Inspect a container to find the network:"
echo "   docker inspect <api-container-name> | grep -A 5 NetworkMode"
echo ""

echo "=================================================="
echo "üåê Cloudflare Tunnel Configuration"
echo "=================================================="
echo ""
echo "Based on Coolify's setup, you need to configure your tunnel routes as follows:"
echo ""
echo "Option 1: Using container names (if containers are on the same network):"
echo "  - Public hostname: communication-api.caramelme.com"
echo "    Service: http://<api-container-name>:3001"
echo "  - Public hostname: communication-dashboard.caramelme.com"
echo "    Service: http://<dashboard-container-name>:3000"
echo ""
echo "Option 2: Using service names (if docker-compose services are preserved):"
echo "  - Public hostname: communication-api.caramelme.com"
echo "    Service: http://api:3001"
echo "  - Public hostname: communication-dashboard.caramelme.com"
echo "    Service: http://dashboard:3000"
echo ""
echo "Option 3: Using host networking (if containers use host network):"
echo "  - Public hostname: communication-api.caramelme.com"
echo "    Service: http://localhost:3001"
echo "  - Public hostname: communication-dashboard.caramelme.com"
echo "    Service: http://localhost:3000"
echo ""

echo "=================================================="
echo "üîç Debugging Steps"
echo "=================================================="
echo ""
echo "1. Check if cloudflared container can reach the services:"
echo "   docker exec <cloudflared-container> ping api"
echo "   docker exec <cloudflared-container> wget -O- http://api:3001/health"
echo ""
echo "2. Check container logs:"
echo "   docker logs <api-container> --tail 50"
echo "   docker logs <cloudflared-container> --tail 50"
echo ""
echo "3. Verify environment variables in Coolify:"
echo "   - CF_TUNNEL_TOKEN is set"
echo "   - API_BASE_URL = https://communication-api.caramelme.com"
echo "   - DASHBOARD_URL = https://communication-dashboard.caramelme.com"
echo ""

echo "=================================================="
echo "‚öôÔ∏è Alternative: Direct Container IPs"
echo "=================================================="
echo ""
echo "If service names don't work, get container IPs:"
echo "   docker inspect <api-container> | grep IPAddress"
echo "   docker inspect <dashboard-container> | grep IPAddress"
echo ""
echo "Then use these IPs in your tunnel configuration:"
echo "   http://<api-container-ip>:3001"
echo "   http://<dashboard-container-ip>:3000"
echo ""

echo "=================================================="
echo "üìù Notes"
echo "=================================================="
echo ""
echo "- Coolify may add prefixes to container names (e.g., 'coolify-')"
echo "- Container names may change on each deployment"
echo "- Using service names (api, dashboard) is more stable if supported"
echo "- Ensure all containers are on the same Docker network"
echo ""