# PostgreSQL Configuration for Dittofeed Enterprise Multitenancy
# Optimized for RLS, performance, and multi-tenant workloads

# =============================================================================
# CONNECTION AND AUTHENTICATION
# =============================================================================

# Listen on all addresses within Docker network
listen_addresses = '*'

# Port configuration  
port = 5432

# Maximum connections (adjust based on your workload)
max_connections = 200

# Superuser reserved connections
superuser_reserved_connections = 3

# =============================================================================
# RESOURCE USAGE (MEMORY)
# =============================================================================

# Shared memory buffers (25% of total RAM recommended)
shared_buffers = 256MB

# Effective cache size (50-75% of total RAM)
effective_cache_size = 1GB

# Work memory per operation
work_mem = 8MB

# Maintenance work memory
maintenance_work_mem = 64MB

# =============================================================================
# WRITE AHEAD LOGGING (WAL)
# =============================================================================

# WAL level for replication
wal_level = replica

# WAL buffers
wal_buffers = 16MB

# WAL writer delay
wal_writer_delay = 200ms

# Checkpoint settings
checkpoint_timeout = 15min
checkpoint_completion_target = 0.7
max_wal_size = 1GB
min_wal_size = 80MB

# =============================================================================
# QUERY TUNING
# =============================================================================

# Random page cost (lower for SSD)
random_page_cost = 1.1

# Effective I/O concurrency
effective_io_concurrency = 200

# Maximum parallel workers
max_parallel_workers = 4
max_parallel_workers_per_gather = 2
max_parallel_maintenance_workers = 2

# Cost-based optimizer settings
cpu_tuple_cost = 0.01
cpu_index_tuple_cost = 0.005
cpu_operator_cost = 0.0025

# =============================================================================
# MULTITENANCY AND ROW-LEVEL SECURITY
# =============================================================================

# Enable RLS by default
row_security = on

# Shared preload libraries for RLS optimizations
shared_preload_libraries = 'pg_stat_statements,auto_explain'

# =============================================================================
# LOGGING AND MONITORING
# =============================================================================

# Logging collector
logging_collector = on
log_directory = 'pg_log'
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
log_rotation_age = 1d
log_rotation_size = 100MB

# What to log
log_min_messages = warning
log_min_error_statement = error
log_min_duration_statement = 1000  # Log queries > 1 second

# Log statement types
log_statement = 'ddl'  # Log DDL statements
log_duration = off
log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '

# Log connections and disconnections
log_connections = on
log_disconnections = on

# Log lock waits
log_lock_waits = on
deadlock_timeout = 1s

# =============================================================================
# STATISTICS AND QUERY ANALYSIS
# =============================================================================

# Track activity and statistics
track_activities = on
track_counts = on
track_io_timing = on
track_functions = pl

# pg_stat_statements configuration
pg_stat_statements.max = 10000
pg_stat_statements.track = all
pg_stat_statements.track_utility = on
pg_stat_statements.save = on

# Auto explain configuration for slow queries
auto_explain.log_min_duration = 5000  # 5 seconds
auto_explain.log_analyze = on
auto_explain.log_buffers = on
auto_explain.log_timing = on
auto_explain.log_triggers = on
auto_explain.log_verbose = on
auto_explain.log_nested_statements = on

# =============================================================================
# VACUUM AND AUTOVACUUM
# =============================================================================

# Autovacuum settings (important for multi-tenant workloads)
autovacuum = on
autovacuum_max_workers = 3
autovacuum_naptime = 30s

# Vacuum cost settings
autovacuum_vacuum_cost_delay = 10ms
autovacuum_vacuum_cost_limit = 1000

# Threshold settings
autovacuum_vacuum_threshold = 50
autovacuum_vacuum_scale_factor = 0.1
autovacuum_analyze_threshold = 50
autovacuum_analyze_scale_factor = 0.05

# Freeze settings
autovacuum_freeze_max_age = 200000000
autovacuum_multixact_freeze_max_age = 400000000

# =============================================================================
# REPLICATION (for HA setups)
# =============================================================================

# Archive mode (for point-in-time recovery)
archive_mode = off  # Enable for production backups
# archive_command = 'test ! -f /var/lib/postgresql/archive/%f && cp %p /var/lib/postgresql/archive/%f'

# Streaming replication
max_wal_senders = 3
wal_keep_segments = 32  # Adjust based on replication lag

# =============================================================================
# PERFORMANCE OPTIMIZATIONS FOR MULTITENANCY
# =============================================================================

# Planner settings optimized for workspace-scoped queries
enable_hashjoin = on
enable_hashagg = on
enable_mergejoin = on
enable_nestloop = on

# JIT compilation (PostgreSQL 11+)
jit = on
jit_above_cost = 100000
jit_inline_above_cost = 500000
jit_optimize_above_cost = 500000

# Parallel query settings
parallel_tuple_cost = 0.1
parallel_setup_cost = 1000.0

# =============================================================================
# SECURITY SETTINGS
# =============================================================================

# SSL configuration
ssl = off  # Handled by Cloudflare tunnel
# ssl_cert_file = 'server.crt'
# ssl_key_file = 'server.key'
# ssl_ca_file = 'ca.crt'

# Password encryption
password_encryption = scram-sha-256

# Shared preload libraries for security
# shared_preload_libraries = 'pg_stat_statements,auto_explain,passwordcheck'

# =============================================================================
# LOCALE AND FORMATTING
# =============================================================================

# Locale settings
lc_messages = 'en_US.utf8'
lc_monetary = 'en_US.utf8'
lc_numeric = 'en_US.utf8'
lc_time = 'en_US.utf8'

# Default text search configuration
default_text_search_config = 'pg_catalog.english'

# =============================================================================
# CONNECTION POOLING OPTIMIZATION
# =============================================================================

# TCP settings for connection pooling
tcp_keepalives_idle = 600
tcp_keepalives_interval = 30
tcp_keepalives_count = 3

# =============================================================================
# BACKGROUND WRITER
# =============================================================================

# Background writer settings
bgwriter_delay = 200ms
bgwriter_lru_maxpages = 100
bgwriter_lru_multiplier = 2.0
bgwriter_flush_after = 512kB

# =============================================================================
# CUSTOM SETTINGS FOR DITTOFEED
# =============================================================================

# Timezone
timezone = 'UTC'

# Statement timeout (prevent runaway queries)
statement_timeout = 300000  # 5 minutes

# Lock timeout
lock_timeout = 30000  # 30 seconds

# Idle transaction timeout
idle_in_transaction_session_timeout = 600000  # 10 minutes

# =============================================================================
# EXTENSION CONFIGURATION
# =============================================================================

# Extensions that might be useful for Dittofeed
# CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
# CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
# CREATE EXTENSION IF NOT EXISTS "pg_trgm";
# CREATE EXTENSION IF NOT EXISTS "btree_gin";

# =============================================================================
# TENANT-SPECIFIC OPTIMIZATIONS
# =============================================================================

# Work memory scaling for large tenant operations
# (This can be adjusted per-session based on workspace size)
# SET work_mem = '32MB' for large workspaces
# SET work_mem = '8MB' for small workspaces

# =============================================================================
# MONITORING INTEGRATION
# =============================================================================

# Shared preload libraries for monitoring
shared_preload_libraries = 'pg_stat_statements'

# Custom statistics for tenant metrics
# (Handled by application-level monitoring)

# =============================================================================
# BACKUP AND RECOVERY
# =============================================================================

# Point-in-time recovery settings
# archive_mode = on
# archive_command = 'wal-e wal-push %p'  # Example with wal-e
# archive_timeout = 300

# Hot standby settings (for read replicas)
# hot_standby = on
# hot_standby_feedback = on
# max_standby_streaming_delay = 30s

# =============================================================================
# TUNING NOTES
# =============================================================================

# 1. Adjust shared_buffers based on available RAM
# 2. Monitor pg_stat_activity for long-running queries
# 3. Use pg_stat_statements to identify slow queries
# 4. Regularly ANALYZE tables after bulk operations
# 5. Monitor autovacuum activity and adjust settings
# 6. Consider partitioning for very large tenant tables
# 7. Use connection pooling (PgBouncer) for high-connection workloads

# =============================================================================
# WORKSPACE-SPECIFIC CONFIGURATIONS
# =============================================================================

# These settings can be adjusted per workspace/tenant:
# - work_mem for data processing workloads
# - maintenance_work_mem for bulk operations
# - statement_timeout for long-running analytics
# - RLS policies are workspace-scoped automatically