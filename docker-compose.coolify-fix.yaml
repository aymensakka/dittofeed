version: '3.8'

# Docker Compose configuration for Coolify deployment with embedded dashboard
# This file handles Coolify's network requirements

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-dittofeed}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-dittofeed}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dittofeed"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - coolify

  clickhouse:
    image: clickhouse/clickhouse-server:23.7
    environment:
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-dittofeed}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-password}
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-dittofeed}
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    ports:
      - "${CLICKHOUSE_PORT:-8124}:8123"
      - "${CLICKHOUSE_NATIVE_PORT:-9001}:9000"
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - coolify

  redis:
    image: redis:7
    command: redis-server --requirepass ${REDIS_PASSWORD:-password}
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - coolify

  temporal:
    image: temporalio/auto-setup:1.22.4
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-dittofeed}
      - POSTGRES_PWD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    ports:
      - "${TEMPORAL_PORT:-7234}:7233"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - coolify

  api:
    image: docker.reactmotion.com/my-docker-repo/dittofeed/api:embedded-final
    environment:
      # Authentication
      AUTH_MODE: ${AUTH_MODE:-multi-tenant}
      AUTH_PROVIDER: ${AUTH_PROVIDER:-google}
      JWT_SECRET: ${JWT_SECRET}
      SECRET_KEY: ${SECRET_KEY}
      
      # Google OAuth
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      
      # Database connections
      DATABASE_URL: postgresql://${POSTGRES_USER:-dittofeed}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-dittofeed}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-password}
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-dittofeed}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-password}
      TEMPORAL_ADDRESS: temporal:7233
      
      # API Configuration
      ALLOW_AUTO_WORKSPACE_CREATION: ${ALLOW_AUTO_WORKSPACE_CREATION:-true}
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      
      # Optional: HubSpot integration
      HUBSPOT_CLIENT_ID: ${HUBSPOT_CLIENT_ID}
      HUBSPOT_CLIENT_SECRET: ${HUBSPOT_CLIENT_SECRET}
    ports:
      - "${API_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      temporal:
        condition: service_started
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => {console.log('Health check status:', r.statusCode); process.exit(r.statusCode === 200 ? 0 : 1)}).on('error', (e) => {console.error('Health check error:', e); process.exit(1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - coolify

  dashboard:
    image: docker.reactmotion.com/my-docker-repo/dittofeed/dashboard:embedded-final
    environment:
      # Multi-tenant configuration
      NEXT_PUBLIC_AUTH_MODE: ${AUTH_MODE:-multi-tenant}
      NEXT_PUBLIC_API_BASE: ${NEXT_PUBLIC_API_BASE:-http://api:3001}
      NEXT_PUBLIC_ENABLE_MULTITENANCY: ${NEXT_PUBLIC_ENABLE_MULTITENANCY:-true}
      
      # NextAuth configuration
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000/dashboard}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      
      # Google OAuth (must match API configuration)
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      
      # Optional: HubSpot integration
      HUBSPOT_CLIENT_ID: ${HUBSPOT_CLIENT_ID}
      HUBSPOT_CLIENT_SECRET: ${HUBSPOT_CLIENT_SECRET}
      NEXT_PUBLIC_HUBSPOT_CLIENT_ID: ${HUBSPOT_CLIENT_ID}
      
      # Node configuration
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
    ports:
      - "${DASHBOARD_PORT:-3000}:3000"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/dashboard', (r) => {console.log('Health check status:', r.statusCode); process.exit(r.statusCode === 200 || r.statusCode === 302 ? 0 : 1)}).on('error', (e) => {console.error('Health check error:', e); process.exit(1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - coolify

  worker:
    image: docker.reactmotion.com/my-docker-repo/dittofeed/worker:embedded-final
    environment:
      # Database connections (must match API configuration)
      DATABASE_URL: postgresql://${POSTGRES_USER:-dittofeed}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-dittofeed}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-password}
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-dittofeed}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-password}
      TEMPORAL_ADDRESS: temporal:7233
      
      # Worker configuration
      NODE_ENV: ${NODE_ENV:-production}
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-10}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      temporal:
        condition: service_started
      api:
        condition: service_healthy
    deploy:
      replicas: ${WORKER_REPLICAS:-1}
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - coolify

volumes:
  postgres_data:
    driver: local
  clickhouse_data:
    driver: local
  redis_data:
    driver: local

networks:
  coolify:
    driver: bridge